// Code generated by ent, DO NOT EDIT.

package store

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/MatsuoTakuro/my-template-connect-go/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Store {
	return predicate.Store(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Store {
	return predicate.Store(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Store {
	return predicate.Store(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Store {
	return predicate.Store(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Store {
	return predicate.Store(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Store {
	return predicate.Store(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Store {
	return predicate.Store(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Store {
	return predicate.Store(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Store {
	return predicate.Store(sql.FieldLTE(FieldID, id))
}

// StoreCd applies equality check predicate on the "store_cd" field. It's identical to StoreCdEQ.
func StoreCd(v int) predicate.Store {
	return predicate.Store(sql.FieldEQ(FieldStoreCd, v))
}

// CompanyCd applies equality check predicate on the "company_cd" field. It's identical to CompanyCdEQ.
func CompanyCd(v int) predicate.Store {
	return predicate.Store(sql.FieldEQ(FieldCompanyCd, v))
}

// StoreName applies equality check predicate on the "store_name" field. It's identical to StoreNameEQ.
func StoreName(v string) predicate.Store {
	return predicate.Store(sql.FieldEQ(FieldStoreName, v))
}

// Address applies equality check predicate on the "address" field. It's identical to AddressEQ.
func Address(v string) predicate.Store {
	return predicate.Store(sql.FieldEQ(FieldAddress, v))
}

// Latitude applies equality check predicate on the "latitude" field. It's identical to LatitudeEQ.
func Latitude(v float64) predicate.Store {
	return predicate.Store(sql.FieldEQ(FieldLatitude, v))
}

// Longitude applies equality check predicate on the "longitude" field. It's identical to LongitudeEQ.
func Longitude(v float64) predicate.Store {
	return predicate.Store(sql.FieldEQ(FieldLongitude, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Store {
	return predicate.Store(sql.FieldEQ(FieldCreatedAt, v))
}

// StoreCdEQ applies the EQ predicate on the "store_cd" field.
func StoreCdEQ(v int) predicate.Store {
	return predicate.Store(sql.FieldEQ(FieldStoreCd, v))
}

// StoreCdNEQ applies the NEQ predicate on the "store_cd" field.
func StoreCdNEQ(v int) predicate.Store {
	return predicate.Store(sql.FieldNEQ(FieldStoreCd, v))
}

// StoreCdIn applies the In predicate on the "store_cd" field.
func StoreCdIn(vs ...int) predicate.Store {
	return predicate.Store(sql.FieldIn(FieldStoreCd, vs...))
}

// StoreCdNotIn applies the NotIn predicate on the "store_cd" field.
func StoreCdNotIn(vs ...int) predicate.Store {
	return predicate.Store(sql.FieldNotIn(FieldStoreCd, vs...))
}

// StoreCdGT applies the GT predicate on the "store_cd" field.
func StoreCdGT(v int) predicate.Store {
	return predicate.Store(sql.FieldGT(FieldStoreCd, v))
}

// StoreCdGTE applies the GTE predicate on the "store_cd" field.
func StoreCdGTE(v int) predicate.Store {
	return predicate.Store(sql.FieldGTE(FieldStoreCd, v))
}

// StoreCdLT applies the LT predicate on the "store_cd" field.
func StoreCdLT(v int) predicate.Store {
	return predicate.Store(sql.FieldLT(FieldStoreCd, v))
}

// StoreCdLTE applies the LTE predicate on the "store_cd" field.
func StoreCdLTE(v int) predicate.Store {
	return predicate.Store(sql.FieldLTE(FieldStoreCd, v))
}

// CompanyCdEQ applies the EQ predicate on the "company_cd" field.
func CompanyCdEQ(v int) predicate.Store {
	return predicate.Store(sql.FieldEQ(FieldCompanyCd, v))
}

// CompanyCdNEQ applies the NEQ predicate on the "company_cd" field.
func CompanyCdNEQ(v int) predicate.Store {
	return predicate.Store(sql.FieldNEQ(FieldCompanyCd, v))
}

// CompanyCdIn applies the In predicate on the "company_cd" field.
func CompanyCdIn(vs ...int) predicate.Store {
	return predicate.Store(sql.FieldIn(FieldCompanyCd, vs...))
}

// CompanyCdNotIn applies the NotIn predicate on the "company_cd" field.
func CompanyCdNotIn(vs ...int) predicate.Store {
	return predicate.Store(sql.FieldNotIn(FieldCompanyCd, vs...))
}

// CompanyCdGT applies the GT predicate on the "company_cd" field.
func CompanyCdGT(v int) predicate.Store {
	return predicate.Store(sql.FieldGT(FieldCompanyCd, v))
}

// CompanyCdGTE applies the GTE predicate on the "company_cd" field.
func CompanyCdGTE(v int) predicate.Store {
	return predicate.Store(sql.FieldGTE(FieldCompanyCd, v))
}

// CompanyCdLT applies the LT predicate on the "company_cd" field.
func CompanyCdLT(v int) predicate.Store {
	return predicate.Store(sql.FieldLT(FieldCompanyCd, v))
}

// CompanyCdLTE applies the LTE predicate on the "company_cd" field.
func CompanyCdLTE(v int) predicate.Store {
	return predicate.Store(sql.FieldLTE(FieldCompanyCd, v))
}

// StoreNameEQ applies the EQ predicate on the "store_name" field.
func StoreNameEQ(v string) predicate.Store {
	return predicate.Store(sql.FieldEQ(FieldStoreName, v))
}

// StoreNameNEQ applies the NEQ predicate on the "store_name" field.
func StoreNameNEQ(v string) predicate.Store {
	return predicate.Store(sql.FieldNEQ(FieldStoreName, v))
}

// StoreNameIn applies the In predicate on the "store_name" field.
func StoreNameIn(vs ...string) predicate.Store {
	return predicate.Store(sql.FieldIn(FieldStoreName, vs...))
}

// StoreNameNotIn applies the NotIn predicate on the "store_name" field.
func StoreNameNotIn(vs ...string) predicate.Store {
	return predicate.Store(sql.FieldNotIn(FieldStoreName, vs...))
}

// StoreNameGT applies the GT predicate on the "store_name" field.
func StoreNameGT(v string) predicate.Store {
	return predicate.Store(sql.FieldGT(FieldStoreName, v))
}

// StoreNameGTE applies the GTE predicate on the "store_name" field.
func StoreNameGTE(v string) predicate.Store {
	return predicate.Store(sql.FieldGTE(FieldStoreName, v))
}

// StoreNameLT applies the LT predicate on the "store_name" field.
func StoreNameLT(v string) predicate.Store {
	return predicate.Store(sql.FieldLT(FieldStoreName, v))
}

// StoreNameLTE applies the LTE predicate on the "store_name" field.
func StoreNameLTE(v string) predicate.Store {
	return predicate.Store(sql.FieldLTE(FieldStoreName, v))
}

// StoreNameContains applies the Contains predicate on the "store_name" field.
func StoreNameContains(v string) predicate.Store {
	return predicate.Store(sql.FieldContains(FieldStoreName, v))
}

// StoreNameHasPrefix applies the HasPrefix predicate on the "store_name" field.
func StoreNameHasPrefix(v string) predicate.Store {
	return predicate.Store(sql.FieldHasPrefix(FieldStoreName, v))
}

// StoreNameHasSuffix applies the HasSuffix predicate on the "store_name" field.
func StoreNameHasSuffix(v string) predicate.Store {
	return predicate.Store(sql.FieldHasSuffix(FieldStoreName, v))
}

// StoreNameEqualFold applies the EqualFold predicate on the "store_name" field.
func StoreNameEqualFold(v string) predicate.Store {
	return predicate.Store(sql.FieldEqualFold(FieldStoreName, v))
}

// StoreNameContainsFold applies the ContainsFold predicate on the "store_name" field.
func StoreNameContainsFold(v string) predicate.Store {
	return predicate.Store(sql.FieldContainsFold(FieldStoreName, v))
}

// AddressEQ applies the EQ predicate on the "address" field.
func AddressEQ(v string) predicate.Store {
	return predicate.Store(sql.FieldEQ(FieldAddress, v))
}

// AddressNEQ applies the NEQ predicate on the "address" field.
func AddressNEQ(v string) predicate.Store {
	return predicate.Store(sql.FieldNEQ(FieldAddress, v))
}

// AddressIn applies the In predicate on the "address" field.
func AddressIn(vs ...string) predicate.Store {
	return predicate.Store(sql.FieldIn(FieldAddress, vs...))
}

// AddressNotIn applies the NotIn predicate on the "address" field.
func AddressNotIn(vs ...string) predicate.Store {
	return predicate.Store(sql.FieldNotIn(FieldAddress, vs...))
}

// AddressGT applies the GT predicate on the "address" field.
func AddressGT(v string) predicate.Store {
	return predicate.Store(sql.FieldGT(FieldAddress, v))
}

// AddressGTE applies the GTE predicate on the "address" field.
func AddressGTE(v string) predicate.Store {
	return predicate.Store(sql.FieldGTE(FieldAddress, v))
}

// AddressLT applies the LT predicate on the "address" field.
func AddressLT(v string) predicate.Store {
	return predicate.Store(sql.FieldLT(FieldAddress, v))
}

// AddressLTE applies the LTE predicate on the "address" field.
func AddressLTE(v string) predicate.Store {
	return predicate.Store(sql.FieldLTE(FieldAddress, v))
}

// AddressContains applies the Contains predicate on the "address" field.
func AddressContains(v string) predicate.Store {
	return predicate.Store(sql.FieldContains(FieldAddress, v))
}

// AddressHasPrefix applies the HasPrefix predicate on the "address" field.
func AddressHasPrefix(v string) predicate.Store {
	return predicate.Store(sql.FieldHasPrefix(FieldAddress, v))
}

// AddressHasSuffix applies the HasSuffix predicate on the "address" field.
func AddressHasSuffix(v string) predicate.Store {
	return predicate.Store(sql.FieldHasSuffix(FieldAddress, v))
}

// AddressEqualFold applies the EqualFold predicate on the "address" field.
func AddressEqualFold(v string) predicate.Store {
	return predicate.Store(sql.FieldEqualFold(FieldAddress, v))
}

// AddressContainsFold applies the ContainsFold predicate on the "address" field.
func AddressContainsFold(v string) predicate.Store {
	return predicate.Store(sql.FieldContainsFold(FieldAddress, v))
}

// LatitudeEQ applies the EQ predicate on the "latitude" field.
func LatitudeEQ(v float64) predicate.Store {
	return predicate.Store(sql.FieldEQ(FieldLatitude, v))
}

// LatitudeNEQ applies the NEQ predicate on the "latitude" field.
func LatitudeNEQ(v float64) predicate.Store {
	return predicate.Store(sql.FieldNEQ(FieldLatitude, v))
}

// LatitudeIn applies the In predicate on the "latitude" field.
func LatitudeIn(vs ...float64) predicate.Store {
	return predicate.Store(sql.FieldIn(FieldLatitude, vs...))
}

// LatitudeNotIn applies the NotIn predicate on the "latitude" field.
func LatitudeNotIn(vs ...float64) predicate.Store {
	return predicate.Store(sql.FieldNotIn(FieldLatitude, vs...))
}

// LatitudeGT applies the GT predicate on the "latitude" field.
func LatitudeGT(v float64) predicate.Store {
	return predicate.Store(sql.FieldGT(FieldLatitude, v))
}

// LatitudeGTE applies the GTE predicate on the "latitude" field.
func LatitudeGTE(v float64) predicate.Store {
	return predicate.Store(sql.FieldGTE(FieldLatitude, v))
}

// LatitudeLT applies the LT predicate on the "latitude" field.
func LatitudeLT(v float64) predicate.Store {
	return predicate.Store(sql.FieldLT(FieldLatitude, v))
}

// LatitudeLTE applies the LTE predicate on the "latitude" field.
func LatitudeLTE(v float64) predicate.Store {
	return predicate.Store(sql.FieldLTE(FieldLatitude, v))
}

// LongitudeEQ applies the EQ predicate on the "longitude" field.
func LongitudeEQ(v float64) predicate.Store {
	return predicate.Store(sql.FieldEQ(FieldLongitude, v))
}

// LongitudeNEQ applies the NEQ predicate on the "longitude" field.
func LongitudeNEQ(v float64) predicate.Store {
	return predicate.Store(sql.FieldNEQ(FieldLongitude, v))
}

// LongitudeIn applies the In predicate on the "longitude" field.
func LongitudeIn(vs ...float64) predicate.Store {
	return predicate.Store(sql.FieldIn(FieldLongitude, vs...))
}

// LongitudeNotIn applies the NotIn predicate on the "longitude" field.
func LongitudeNotIn(vs ...float64) predicate.Store {
	return predicate.Store(sql.FieldNotIn(FieldLongitude, vs...))
}

// LongitudeGT applies the GT predicate on the "longitude" field.
func LongitudeGT(v float64) predicate.Store {
	return predicate.Store(sql.FieldGT(FieldLongitude, v))
}

// LongitudeGTE applies the GTE predicate on the "longitude" field.
func LongitudeGTE(v float64) predicate.Store {
	return predicate.Store(sql.FieldGTE(FieldLongitude, v))
}

// LongitudeLT applies the LT predicate on the "longitude" field.
func LongitudeLT(v float64) predicate.Store {
	return predicate.Store(sql.FieldLT(FieldLongitude, v))
}

// LongitudeLTE applies the LTE predicate on the "longitude" field.
func LongitudeLTE(v float64) predicate.Store {
	return predicate.Store(sql.FieldLTE(FieldLongitude, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Store {
	return predicate.Store(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Store {
	return predicate.Store(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Store {
	return predicate.Store(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Store {
	return predicate.Store(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Store {
	return predicate.Store(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Store {
	return predicate.Store(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Store {
	return predicate.Store(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Store {
	return predicate.Store(sql.FieldLTE(FieldCreatedAt, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Store) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Store) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Store) predicate.Store {
	return predicate.Store(func(s *sql.Selector) {
		p(s.Not())
	})
}
