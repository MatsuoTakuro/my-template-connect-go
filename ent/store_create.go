// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/MatsuoTakuro/my-template-connect-go/ent/store"
)

// StoreCreate is the builder for creating a Store entity.
type StoreCreate struct {
	config
	mutation *StoreMutation
	hooks    []Hook
}

// SetStoreCd sets the "store_cd" field.
func (sc *StoreCreate) SetStoreCd(i int) *StoreCreate {
	sc.mutation.SetStoreCd(i)
	return sc
}

// SetCompanyCd sets the "company_cd" field.
func (sc *StoreCreate) SetCompanyCd(i int) *StoreCreate {
	sc.mutation.SetCompanyCd(i)
	return sc
}

// SetStoreName sets the "store_name" field.
func (sc *StoreCreate) SetStoreName(s string) *StoreCreate {
	sc.mutation.SetStoreName(s)
	return sc
}

// SetAddress sets the "address" field.
func (sc *StoreCreate) SetAddress(s string) *StoreCreate {
	sc.mutation.SetAddress(s)
	return sc
}

// SetLatitude sets the "latitude" field.
func (sc *StoreCreate) SetLatitude(f float64) *StoreCreate {
	sc.mutation.SetLatitude(f)
	return sc
}

// SetLongitude sets the "longitude" field.
func (sc *StoreCreate) SetLongitude(f float64) *StoreCreate {
	sc.mutation.SetLongitude(f)
	return sc
}

// SetCreatedAt sets the "created_at" field.
func (sc *StoreCreate) SetCreatedAt(t time.Time) *StoreCreate {
	sc.mutation.SetCreatedAt(t)
	return sc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sc *StoreCreate) SetNillableCreatedAt(t *time.Time) *StoreCreate {
	if t != nil {
		sc.SetCreatedAt(*t)
	}
	return sc
}

// SetID sets the "id" field.
func (sc *StoreCreate) SetID(i int) *StoreCreate {
	sc.mutation.SetID(i)
	return sc
}

// Mutation returns the StoreMutation object of the builder.
func (sc *StoreCreate) Mutation() *StoreMutation {
	return sc.mutation
}

// Save creates the Store in the database.
func (sc *StoreCreate) Save(ctx context.Context) (*Store, error) {
	sc.defaults()
	return withHooks[*Store, StoreMutation](ctx, sc.sqlSave, sc.mutation, sc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sc *StoreCreate) SaveX(ctx context.Context) *Store {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *StoreCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *StoreCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sc *StoreCreate) defaults() {
	if _, ok := sc.mutation.CreatedAt(); !ok {
		v := store.DefaultCreatedAt()
		sc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sc *StoreCreate) check() error {
	if _, ok := sc.mutation.StoreCd(); !ok {
		return &ValidationError{Name: "store_cd", err: errors.New(`ent: missing required field "Store.store_cd"`)}
	}
	if _, ok := sc.mutation.CompanyCd(); !ok {
		return &ValidationError{Name: "company_cd", err: errors.New(`ent: missing required field "Store.company_cd"`)}
	}
	if _, ok := sc.mutation.StoreName(); !ok {
		return &ValidationError{Name: "store_name", err: errors.New(`ent: missing required field "Store.store_name"`)}
	}
	if _, ok := sc.mutation.Address(); !ok {
		return &ValidationError{Name: "address", err: errors.New(`ent: missing required field "Store.address"`)}
	}
	if _, ok := sc.mutation.Latitude(); !ok {
		return &ValidationError{Name: "latitude", err: errors.New(`ent: missing required field "Store.latitude"`)}
	}
	if _, ok := sc.mutation.Longitude(); !ok {
		return &ValidationError{Name: "longitude", err: errors.New(`ent: missing required field "Store.longitude"`)}
	}
	if _, ok := sc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Store.created_at"`)}
	}
	return nil
}

func (sc *StoreCreate) sqlSave(ctx context.Context) (*Store, error) {
	if err := sc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	sc.mutation.id = &_node.ID
	sc.mutation.done = true
	return _node, nil
}

func (sc *StoreCreate) createSpec() (*Store, *sqlgraph.CreateSpec) {
	var (
		_node = &Store{config: sc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: store.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: store.FieldID,
			},
		}
	)
	if id, ok := sc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := sc.mutation.StoreCd(); ok {
		_spec.SetField(store.FieldStoreCd, field.TypeInt, value)
		_node.StoreCd = value
	}
	if value, ok := sc.mutation.CompanyCd(); ok {
		_spec.SetField(store.FieldCompanyCd, field.TypeInt, value)
		_node.CompanyCd = value
	}
	if value, ok := sc.mutation.StoreName(); ok {
		_spec.SetField(store.FieldStoreName, field.TypeString, value)
		_node.StoreName = value
	}
	if value, ok := sc.mutation.Address(); ok {
		_spec.SetField(store.FieldAddress, field.TypeString, value)
		_node.Address = value
	}
	if value, ok := sc.mutation.Latitude(); ok {
		_spec.SetField(store.FieldLatitude, field.TypeFloat64, value)
		_node.Latitude = value
	}
	if value, ok := sc.mutation.Longitude(); ok {
		_spec.SetField(store.FieldLongitude, field.TypeFloat64, value)
		_node.Longitude = value
	}
	if value, ok := sc.mutation.CreatedAt(); ok {
		_spec.SetField(store.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	return _node, _spec
}

// StoreCreateBulk is the builder for creating many Store entities in bulk.
type StoreCreateBulk struct {
	config
	builders []*StoreCreate
}

// Save creates the Store entities in the database.
func (scb *StoreCreateBulk) Save(ctx context.Context) ([]*Store, error) {
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Store, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*StoreMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *StoreCreateBulk) SaveX(ctx context.Context) []*Store {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *StoreCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *StoreCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}
