// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: templateconnectgo/v1/store.proto

package storev1connect

import (
	context "context"
	errors "errors"
	v1 "github.com/MatsuoTakuro/my-template-connect-go/gen/templateconnectgo/v1"
	connect_go "github.com/bufbuild/connect-go"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// StoreServiceName is the fully-qualified name of the StoreService service.
	StoreServiceName = "templateconnectgo.v1.StoreService"
)

// StoreServiceClient is a client for the templateconnectgo.v1.StoreService service.
type StoreServiceClient interface {
	ListStores(context.Context, *connect_go.Request[v1.ListStoresRequest]) (*connect_go.Response[v1.ListStoresResponse], error)
}

// NewStoreServiceClient constructs a client for the templateconnectgo.v1.StoreService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewStoreServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) StoreServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &storeServiceClient{
		listStores: connect_go.NewClient[v1.ListStoresRequest, v1.ListStoresResponse](
			httpClient,
			baseURL+"/templateconnectgo.v1.StoreService/ListStores",
			opts...,
		),
	}
}

// storeServiceClient implements StoreServiceClient.
type storeServiceClient struct {
	listStores *connect_go.Client[v1.ListStoresRequest, v1.ListStoresResponse]
}

// ListStores calls templateconnectgo.v1.StoreService.ListStores.
func (c *storeServiceClient) ListStores(ctx context.Context, req *connect_go.Request[v1.ListStoresRequest]) (*connect_go.Response[v1.ListStoresResponse], error) {
	return c.listStores.CallUnary(ctx, req)
}

// StoreServiceHandler is an implementation of the templateconnectgo.v1.StoreService service.
type StoreServiceHandler interface {
	ListStores(context.Context, *connect_go.Request[v1.ListStoresRequest]) (*connect_go.Response[v1.ListStoresResponse], error)
}

// NewStoreServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewStoreServiceHandler(svc StoreServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/templateconnectgo.v1.StoreService/ListStores", connect_go.NewUnaryHandler(
		"/templateconnectgo.v1.StoreService/ListStores",
		svc.ListStores,
		opts...,
	))
	return "/templateconnectgo.v1.StoreService/", mux
}

// UnimplementedStoreServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedStoreServiceHandler struct{}

func (UnimplementedStoreServiceHandler) ListStores(context.Context, *connect_go.Request[v1.ListStoresRequest]) (*connect_go.Response[v1.ListStoresResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("templateconnectgo.v1.StoreService.ListStores is not implemented"))
}
